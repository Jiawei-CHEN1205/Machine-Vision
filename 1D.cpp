#include "stdafx.h"
///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 20.11.1.2
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// Ensure that the interface encoding is set to locale encoding by calling
// SetHcppInterfaceStringEncodingIsUtf8(false) at the beginning of the program.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
///////////////////////////////////////////////////////////////////////////////



#ifndef __APPLE__
#  include "HalconCpp.h"
#  include "HDevThread.h"
#else
#  ifndef HC_LARGE_IMAGES
#    include <HALCONCpp/HalconCpp.h>
#    include <HALCONCpp/HDevThread.h>
#    include <HALCON/HpThread.h>
#  else
#    include <HALCONCppxl/HalconCpp.h>
#    include <HALCONCppxl/HDevThread.h>
#    include <HALCONxl/HpThread.h>
#  endif
#  include <stdio.h>
#  include <CoreFoundation/CFRunLoop.h>
#endif



using namespace HalconCpp;
using namespace std;


#ifndef NO_EXPORT_MAIN
// Main procedure 
void action()
{

  // Local iconic variables
  HObject  ho_Image, ho_Rectangle, ho_Contour, ho_Contour1;

  // Local control variables
  HTuple  hv_AmplitudeThreshold, hv_RoiWidthLen2;
  HTuple  hv_LineRowStart_Measure_01_0, hv_LineColumnStart_Measure_01_0;
  HTuple  hv_LineRowEnd_Measure_01_0, hv_LineColumnEnd_Measure_01_0;
  HTuple  hv_TmpCtrl_Row, hv_TmpCtrl_Column, hv_TmpCtrl_Dr;
  HTuple  hv_TmpCtrl_Dc, hv_TmpCtrl_Phi, hv_TmpCtrl_Len1;
  HTuple  hv_TmpCtrl_Len2, hv_MsrHandle_Measure_01_0, hv_Row_Measure_01_0;
  HTuple  hv_Column_Measure_01_0, hv_Amplitude_Measure_01_0;
  HTuple  hv_Distance_Measure_01_0;

  //Measure 01: Code generated by Measure 01
  //Measure 01: Prepare measurement
  hv_AmplitudeThreshold = 13;
  hv_RoiWidthLen2 = 41;
  SetSystem("int_zooming", "true");
  //Measure 01: Coordinates for line Measure 01 [0]
  hv_LineRowStart_Measure_01_0 = 577.207;
  hv_LineColumnStart_Measure_01_0 = 471.393;
  hv_LineRowEnd_Measure_01_0 = 664.247;
  hv_LineColumnEnd_Measure_01_0 = 456.033;
  //Measure 01: Convert coordinates to rectangle2 type
  hv_TmpCtrl_Row = 0.5*(hv_LineRowStart_Measure_01_0+hv_LineRowEnd_Measure_01_0);
  hv_TmpCtrl_Column = 0.5*(hv_LineColumnStart_Measure_01_0+hv_LineColumnEnd_Measure_01_0);
  hv_TmpCtrl_Dr = hv_LineRowStart_Measure_01_0-hv_LineRowEnd_Measure_01_0;
  hv_TmpCtrl_Dc = hv_LineColumnEnd_Measure_01_0-hv_LineColumnStart_Measure_01_0;
  hv_TmpCtrl_Phi = hv_TmpCtrl_Dr.TupleAtan2(hv_TmpCtrl_Dc);
  hv_TmpCtrl_Len1 = 0.5*(((hv_TmpCtrl_Dr*hv_TmpCtrl_Dr)+(hv_TmpCtrl_Dc*hv_TmpCtrl_Dc)).TupleSqrt());
  hv_TmpCtrl_Len2 = hv_RoiWidthLen2;
  //Measure 01: Create measure for line Measure 01 [0]
  //Measure 01: Attention: This assumes all images have the same size!
  GenMeasureRectangle2(hv_TmpCtrl_Row, hv_TmpCtrl_Column, hv_TmpCtrl_Phi, hv_TmpCtrl_Len1, 
      hv_TmpCtrl_Len2, 1280, 1024, "nearest_neighbor", &hv_MsrHandle_Measure_01_0);
  //Measure 01: ***************************************************************
  //Measure 01: * The code which follows is to be executed once / measurement *
  //Measure 01: ***************************************************************
  //Measure 01: Load image
  //read_image (Image, 'C:/Users/DYF/Desktop/1/3.jpg.tif')
  ReadImage(&ho_Image,'C:/Users/DYF/Desktop/1/3.jpg.tif' );


  //Measure 01: Execute measurements
  MeasurePos(ho_Image, hv_MsrHandle_Measure_01_0, 5, hv_AmplitudeThreshold, "all", 
      "all", &hv_Row_Measure_01_0, &hv_Column_Measure_01_0, &hv_Amplitude_Measure_01_0, 
      &hv_Distance_Measure_01_0);
  //Measure 01: Do something with the results
  if (HDevWindowStack::IsOpen())
    SetDraw(HDevWindowStack::GetActive(),"margin");
  if (HDevWindowStack::IsOpen())
    SetColor(HDevWindowStack::GetActive(),"red");
  GenRectangle2(&ho_Rectangle, hv_TmpCtrl_Row, hv_TmpCtrl_Column, hv_TmpCtrl_Phi, 
      hv_TmpCtrl_Len1, hv_TmpCtrl_Len2);


  //��ʾ����
  if (HDevWindowStack::IsOpen())
    DispObj(ho_Rectangle, HDevWindowStack::GetActive());


  //������ȡ�ı�Ե������XLD������ʾ
  GenContourPolygonXld(&ho_Contour, hv_Row_Measure_01_0, hv_Column_Measure_01_0);
  GenContourPolygonXld(&ho_Contour1, hv_Row_Measure_01_0, hv_Column_Measure_01_0);
  //�ò�ͬ��ɫ��ʾ��Ե
  if (HDevWindowStack::IsOpen())
    SetColor(HDevWindowStack::GetActive(),"blue");
  if (HDevWindowStack::IsOpen())
    DispObj(ho_Contour, HDevWindowStack::GetActive());
  if (HDevWindowStack::IsOpen())
    SetColor(HDevWindowStack::GetActive(),"red");
  if (HDevWindowStack::IsOpen())
    DispObj(ho_Contour1, HDevWindowStack::GetActive());
}


#ifndef NO_EXPORT_APP_MAIN

#ifdef __APPLE__
// On OS X systems, we must have a CFRunLoop running on the main thread in
// order for the HALCON graphics operators to work correctly, and run the
// action function in a separate thread. A CFRunLoopTimer is used to make sure
// the action function is not called before the CFRunLoop is running.
// Note that starting with macOS 10.12, the run loop may be stopped when a
// window is closed, so we need to put the call to CFRunLoopRun() into a loop
// of its own.
HTuple      gStartMutex;
H_pthread_t gActionThread;
HBOOL       gTerminate = FALSE;

static void timer_callback(CFRunLoopTimerRef timer, void *info)
{
  UnlockMutex(gStartMutex);
}

static Herror apple_action(void **parameters)
{
  // Wait until the timer has fired to start processing.
  LockMutex(gStartMutex);
  UnlockMutex(gStartMutex);

  try
  {
    action();
  }
  catch (HException &exception)
  {
    fprintf(stderr,"  Error #%u in %s: %s\n", exception.ErrorCode(),
            exception.ProcName().TextA(),
            exception.ErrorMessage().TextA());
  }

  // Tell the main thread to terminate itself.
  LockMutex(gStartMutex);
  gTerminate = TRUE;
  UnlockMutex(gStartMutex);
  CFRunLoopStop(CFRunLoopGetMain());
  return H_MSG_OK;
}

static int apple_main(int argc, char *argv[])
{
  Herror                error;
  CFRunLoopTimerRef     Timer;
  CFRunLoopTimerContext TimerContext = { 0, 0, 0, 0, 0 };

  CreateMutex("type","sleep",&gStartMutex);
  LockMutex(gStartMutex);

  error = HpThreadHandleAlloc(&gActionThread);
  if (H_MSG_OK != error)
  {
    fprintf(stderr,"HpThreadHandleAlloc failed: %d\n", error);
    exit(1);
  }

  error = HpThreadCreate(gActionThread,0,apple_action);
  if (H_MSG_OK != error)
  {
    fprintf(stderr,"HpThreadCreate failed: %d\n", error);
    exit(1);
  }

  Timer = CFRunLoopTimerCreate(kCFAllocatorDefault,
                               CFAbsoluteTimeGetCurrent(),0,0,0,
                               timer_callback,&TimerContext);
  if (!Timer)
  {
    fprintf(stderr,"CFRunLoopTimerCreate failed\n");
    exit(1);
  }
  CFRunLoopAddTimer(CFRunLoopGetCurrent(),Timer,kCFRunLoopCommonModes);

  for (;;)
  {
    HBOOL terminate;

    CFRunLoopRun();

    LockMutex(gStartMutex);
    terminate = gTerminate;
    UnlockMutex(gStartMutex);

    if (terminate)
      break;
  }

  CFRunLoopRemoveTimer(CFRunLoopGetCurrent(),Timer,kCFRunLoopCommonModes);
  CFRelease(Timer);

  error = HpThreadHandleFree(gActionThread);
  if (H_MSG_OK != error)
  {
    fprintf(stderr,"HpThreadHandleFree failed: %d\n", error);
    exit(1);
  }

  ClearMutex(gStartMutex);
  return 0;
}
#endif

int main(int argc, char *argv[])
{
  int ret = 0;

  try
  {
#if defined(_WIN32)
    SetSystem("use_window_thread", "true");
#endif

    // file was stored with local-8-bit encoding
    //   -> set the interface encoding accordingly
    SetHcppInterfaceStringEncodingIsUtf8(false);

    // Default settings used in HDevelop (can be omitted)
    SetSystem("width", 512);
    SetSystem("height", 512);

#ifndef __APPLE__
    action();
#else
    ret = apple_main(argc,argv);
#endif
  }
  catch (HException &exception)
  {
    fprintf(stderr,"  Error #%u in %s: %s\n", exception.ErrorCode(),
            exception.ProcName().TextA(),
            exception.ErrorMessage().TextA());
    ret = 1;
  }
  return ret;
}

#endif


#endif


